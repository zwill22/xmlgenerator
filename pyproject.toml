[build-system]
requires = ["hatchling >= 1.26"]
build-backend = "hatchling.build"

[project]
name = "XMLGenerator"
description = "Generate fake XML files from schema"
authors = [
    { name = "Z M Williams", email = "z.m.will@icloud.com" }
]
version = "0.1.0"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.10"
dependencies = [
    "faker>=37.4.2",
    "lxml>=6.0.0"
]
keywords = ["Python", "XML", "XSD", "Testing", "DataGeneration"]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Developers",
    "Topic :: Text Processing :: Markup :: XML"
]

[dependency-groups]
dev = [
    "coverage>=7.9.2",
    "pytest>=8.4.1",
    "ruff>=0.12.4",
]
doc = [
    "sphinx>=7.3.7",
    "sphinx-rtd-theme>=2.0",
    "myst-parser>=4.0",
]

[tool.pytest.ini_options]
testpaths = [
    "tests"
]

[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F"]
fixable = ["ALL"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = false
docstring-code-line-length = "dynamic"

[tool.coverage.run]
branch = true
command_line = "-m pytest"
omit = ["tests/*", "docs/*"]

[tool.coverage.report]
ignore_errors = true
fail_under = 80
skip_empty = true
exclude_also = [
    'def __repr__',
    'if self.debug:',
    'if settings.DEBUG',
    'raise AssertionError',
    'raise NotImplementedError',
    'if 0:',
    'if __name__ == .__main__.:',
    'if TYPE_CHECKING:',
    'class .*\bProtocol\):',
    '@(abc\.)?abstractmethod',
]
